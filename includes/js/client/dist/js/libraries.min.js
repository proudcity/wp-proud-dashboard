/* global angular */
function Marker(options){google.maps.Marker.apply(this,arguments),options.map_icon_label&&(this.MarkerLabel=new MarkerLabel({map:this.map,marker:this,text:options.map_icon_label}),this.MarkerLabel.bindTo("position",this,"position"))}angular.module("afkl.lazyImage",[]),/* global angular */
angular.module("afkl.lazyImage").service("afklSrcSetService",["$window",function($window){"use strict";
// SRCSET IMG OBJECT
function ImageInfo(options){this.src=options.src,this.w=options.w||1/0,this.h=options.h||1/0,this.x=options.x||1}/**
         * For other applications wanting the srccset/best image approach it is possible to use this module only
         * Loosely based on https://raw.github.com/borismus/srcset-polyfill/master/js/srcset-info.js
         */
var INT_REGEXP=/^[0-9]+$/,_parseDescriptors=function(descString){for(var descriptors=descString.split(/\s/),out={},i=0,l=descriptors.length;i<l;i++){var desc=descriptors[i];if(desc.length>0){var lastChar=desc.slice(-1),value=desc.substring(0,desc.length-1),intVal=parseInt(value,10),floatVal=parseFloat(value);value.match(INT_REGEXP)&&"w"===lastChar?out[lastChar]=intVal:value.match(INT_REGEXP)&&"h"===lastChar?out[lastChar]=intVal:isNaN(floatVal)||"x"!==lastChar||(out[lastChar]=floatVal)}}return out},_getBestCandidateIf=function(images,criteriaFn){for(var bestCandidate=images[0],i=0,l=images.length;i<l;i++){var candidate=images[i];criteriaFn(candidate,bestCandidate)&&(bestCandidate=candidate)}return bestCandidate},_removeCandidatesIf=function(images,criteriaFn){for(var i=images.length-1;i>=0;i--){var candidate=images[i];criteriaFn(candidate)&&images.splice(i,1)}return images},getBestImage=function(imageCandidates,view){if(imageCandidates){view||(view={w:$window.innerWidth||document.documentElement.clientWidth,h:$window.innerHeight||document.documentElement.clientHeight,x:$window.devicePixelRatio||1});var images=imageCandidates.slice(0),largestWidth=_getBestCandidateIf(images,function(a,b){return a.w>b.w});
// Less than client width.
_removeCandidatesIf(images,function(){return function(a){return a.w<view.w}}(this)),
// If none are left, keep the one with largest width.
0===images.length&&(images=[largestWidth]);
// Height
var largestHeight=_getBestCandidateIf(images,function(a,b){return a.h>b.h});
// Less than client height.
_removeCandidatesIf(images,function(){return function(a){return a.h<view.h}}(this)),
// If none are left, keep one with largest height.
0===images.length&&(images=[largestHeight]);
// Pixel density.
var largestPxDensity=_getBestCandidateIf(images,function(a,b){return a.x>b.x});
// Remove all candidates with pxdensity less than client pxdensity.
_removeCandidatesIf(images,function(){return function(a){return a.x<view.x}}(this)),
// If none are left, keep one with largest pixel density.
0===images.length&&(images=[largestPxDensity]);/* SMALLEST */
// Width
var smallestWidth=_getBestCandidateIf(images,function(a,b){return a.w<b.w});
// Remove all candidates with width greater than it.
_removeCandidatesIf(images,function(a){return a.w>smallestWidth.w});
// Height
var smallestHeight=_getBestCandidateIf(images,function(a,b){return a.h<b.h});
// Remove all candidates with height greater than it.
_removeCandidatesIf(images,function(a){return a.h>smallestHeight.h});
// Pixel density
var smallestPxDensity=_getBestCandidateIf(images,function(a,b){return a.x<b.x});
// Remove all candidates with pixel density less than smallest px density.
return _removeCandidatesIf(images,function(a){return a.x>smallestPxDensity.x}),images[0]}},getSrcset=function(options){var imageCandidates=[],srcValue=options.src,srcsetValue=options.srcset;if(srcsetValue){/* PUSH CANDIDATE [{src: _, x: _, w: _, h:_}, ...] */
var _addCandidate=function(img){for(var j=0,ln=imageCandidates.length;j<ln;j++){var existingCandidate=imageCandidates[j];
// DUPLICATE
if(existingCandidate.x===img.x&&existingCandidate.w===img.w&&existingCandidate.h===img.h)return}imageCandidates.push(img)},_parse=function(){for(var url,descriptors,input=srcsetValue,position=0,rawCandidates=[];""!==input;){for(;" "===input.charAt(0);)input=input.slice(1);position=input.indexOf(" "),position!==-1?(url=input.slice(0,position),
// if (url === '') { break; }
input=input.slice(position+1),position=input.indexOf(","),position===-1?(descriptors=input,input=""):(descriptors=input.slice(0,position),input=input.slice(position+1)),rawCandidates.push({url:url,descriptors:descriptors})):(rawCandidates.push({url:input,descriptors:""}),input="")}
// FROM RAW CANDIDATES PUSH IMAGES TO COMPLETE SET
for(var i=0,l=rawCandidates.length;i<l;i++){var candidate=rawCandidates[i],desc=_parseDescriptors(candidate.descriptors);_addCandidate(new ImageInfo({src:candidate.url,x:desc.x,w:desc.w,h:desc.h}))}srcValue&&_addCandidate(new ImageInfo({src:srcValue}))};_parse();
// Return best available image for current view based on our list of candidates
var bestImage=getBestImage(imageCandidates),object={best:bestImage,// IMAGE INFORMATION WHICH FITS BEST WHEN API IS REQUESTED
candidates:imageCandidates};
// pass best match and candidates
// empty collection
return imageCandidates=null,object}};/**
         * PUBLIC API
         */
return{get:getSrcset,// RETURNS BEST IMAGE AND IMAGE CANDIDATES
image:getBestImage}}]),/* global angular */
angular.module("afkl.lazyImage").directive("afklImageContainer",function(){"use strict";return{restrict:"A",
// We have to use controller instead of link here so that it will always run earlier than nested afklLazyImage directives
controller:["$scope","$element",function($scope,$element){$element.data("afklImageContainer",$element)}]}}).directive("afklLazyImage",["$window","$timeout","afklSrcSetService",function($window,$timeout,srcSetService){"use strict";
// Use srcSetService to find out our best available image
var bestImage=function(images){var sourceUrl,image=srcSetService.get({srcset:images});return image&&(sourceUrl=image.best.src),sourceUrl};return{restrict:"A",link:function(scope,element,attrs){
// CONFIGURATION VARS
var $container=element.inheritedData("afklImageContainer");$container||($container=angular.element(attrs.afklLazyImageContainer||$window));var timeout,img,loaded=!1,images=attrs.afklLazyImage,options=attrs.afklLazyImageOptions?angular.fromJson(attrs.afklLazyImageOptions):{},currentImage=null,offset=options.offset?options.offset:50,alt=options.alt?'alt="'+options.alt+'"':'alt=""',LOADING="afkl-lazy-image-loading",_containerScrollTop=function(){
// See if we can use jQuery, then extra check since directives like angular-scroll fuck this up as well
// TODO: check if number is returned
if($container.scrollTop){var scrollTopPosition=$container.scrollTop();if(scrollTopPosition)return scrollTopPosition}var c=$container[0];return void 0!==c.pageYOffset?c.pageYOffset:void 0!==c.scrollTop?c.scrollTop:document.documentElement.scrollTop||0},_containerInnerHeight=function(){if($container.innerHeight)return $container.innerHeight();var c=$container[0];return void 0!==c.innerHeight?c.innerHeight:void 0!==c.clientHeight?c.clientHeight:document.documentElement.clientHeight||0},_elementOffset=function(){if(element.offset)return element.offset().top;var box=element[0].getBoundingClientRect();return box.top+_containerScrollTop()-document.documentElement.clientTop},_elementOffsetContainer=function(){return element.offset?element.offset().top-$container.offset().top:element[0].getBoundingClientRect().top-$container[0].getBoundingClientRect().top},_setImage=function(){options.background?element[0].style.backgroundImage='url("'+currentImage+'")':img[0].src=currentImage},_placeImage=function(){loaded=!0,
// What is my best image available
currentImage=bestImage(images),currentImage&&(
// we have to make an image if background is false (default)
options.background||img||(element.addClass(LOADING),img=angular.element("<img "+alt+' class="afkl-lazy-image" src=""/>'),
// remove loading class when image is acually loaded
img.one("load",_loaded),element.append(img)),
// set correct src/url
_setImage()),
// Element is added to dom, no need to listen to scroll anymore
$container.off("scroll",_onViewChange)},_checkIfNewImage=function(){if(loaded){var newImage=bestImage(images);newImage!==currentImage&&(
// update current url
currentImage=newImage,
// update image url
_setImage())}};
// First update our begin offset
_checkIfNewImage();var _loaded=function(){element.removeClass(LOADING)},_onViewChange=function(){
// Config vars
var remaining,shouldLoad,windowBottom,height=_containerInnerHeight(),scroll=_containerScrollTop(),elOffset=$container[0]===$window?_elementOffset():_elementOffsetContainer();windowBottom=$container[0]===$window?height+scroll:height,remaining=elOffset-windowBottom,
// Is our top of our image container in bottom of our viewport?
//console.log($container[0].className, _elementOffset(), _elementPosition(), height, scroll, remaining, elOffset);
shouldLoad=remaining<=offset,
// Append image first time when it comes into our view, after that only resizing can have influence
shouldLoad&&!loaded&&_placeImage()},_onResize=function(){$timeout.cancel(timeout),timeout=$timeout(function(){_checkIfNewImage(),_onViewChange()},300)},_eventsOff=function(){$timeout.cancel(timeout),$container.off("scroll",_onViewChange),angular.element($window).off("resize",_onResize),$container[0]!==$window&&$container.off("resize",_onResize),
// remove image being placed
img&&img.remove(),img=timeout=currentImage=void 0};
// Set events for scrolling and resizing
// events for image change
// Image should be directly placed
// Remove all events when destroy takes place
return $container.on("scroll",_onViewChange),angular.element($window).on("resize",_onResize),$container[0]!==$window&&$container.on("resize",_onResize),attrs.$observe("afklLazyImage",function(){images=attrs.afklLazyImage,loaded&&_placeImage()}),options.nolazy&&_placeImage(),scope.$on("$destroy",function(){return _eventsOff()}),_onViewChange()}}}]),function(root,factory){"object"==typeof exports?module.exports=factory(require("angular")):"function"==typeof define&&define.amd?define(["angular"],factory):factory(root.angular)}(this,function(angular){/**
 * AngularJS Google Maps Ver. 1.17.7
 *
 * The MIT License (MIT)
 * 
 * Copyright (c) 2014, 2015, 1016 Allen Kim
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/**
 * @ngdoc controller
 * @name MapController
 */
/**
 * @ngdoc directive
 * @name bicycling-layer
 * @param Attr2Options {service}
 *   convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 *
 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
 *     <bicycling-layer></bicycling-layer>
 *    </map>
 */
/**
 * @ngdoc directive
 * @name custom-control
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @param $compile {service} AngularJS $compile service
 * @description
 *   Build custom control and set to the map with position
 *
 *   Requires:  map directive
 *
 *   Restrict To:  Element
 *
 * @attr {String} position position of this control
 *        i.e. TOP_RIGHT
 * @attr {Number} index index of the control
 * @example
 *
 * Example:
 *  <map center="41.850033,-87.6500523" zoom="3">
 *    <custom-control id="home" position="TOP_LEFT" index="1">
 *      <div style="background-color: white;">
 *        <b>Home</b>
 *      </div>
 *    </custom-control>
 *  </map>
 *
 */
/**
 * @ngdoc directive
 * @memberof ngmap
 * @name custom-marker
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @param $timeout {service} AngularJS $timeout
 * @description
 *   Marker with html
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @attr {String} position required, position on map
 * @attr {Number} z-index optional
 * @attr {Boolean} visible optional
 * @example
 *
 * Example:
 *   <map center="41.850033,-87.6500523" zoom="3">
 *     <custom-marker position="41.850033,-87.6500523">
 *       <div>
 *         <b>Home</b>
 *       </div>
 *     </custom-marker>
 *   </map>
 *
 */
/* global document */
/**
 * @ngdoc directive
 * @name directions
 * @description
 *   Enable directions on map.
 *   e.g., origin, destination, draggable, waypoints, etc
 *
 *   Requires:  map directive
 *
 *   Restrict To:  Element
 *
 * @attr {String} DirectionsRendererOptions
 *   [Any DirectionsRendererOptions](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRendererOptions)
 * @attr {String} DirectionsRequestOptions
 *   [Any DirectionsRequest options](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)
 * @example
 *  <map zoom="14" center="37.7699298, -122.4469157">
 *    <directions
 *      draggable="true"
 *      panel="directions-panel"
 *      travel-mode="{{travelMode}}"
 *      waypoints="[{location:'kingston', stopover:true}]"
 *      origin="{{origin}}"
 *      destination="{{destination}}">
 *    </directions>
 *  </map>
 */
/* global document */
/**
 * @ngdoc directive
 * @name drawing-manager
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *
 *  <map zoom="13" center="37.774546, -122.433523" map-type-id="SATELLITE">
 *    <drawing-manager
 *      on-overlaycomplete="onMapOverlayCompleted()"
 *      position="ControlPosition.TOP_CENTER"
 *      drawingModes="POLYGON,CIRCLE"
 *      drawingControl="true"
 *      circleOptions="fillColor: '#FFFF00';fillOpacity: 1;strokeWeight: 5;clickable: false;zIndex: 1;editable: true;" >
 *    </drawing-manager>
 *  </map>
 *
 *  TODO: Add remove button.
 *  currently, for our solution, we have the shapes/markers in our own
 *  controller, and we use some css classes to change the shape button
 *  to a remove button (<div>X</div>) and have the remove operation in our own controller.
 */
/**
 * @ngdoc directive
 * @name dynamic-maps-engine-layer
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *   <map zoom="14" center="[59.322506, 18.010025]">
 *     <dynamic-maps-engine-layer
 *       layer-id="06673056454046135537-08896501997766553811">
 *     </dynamic-maps-engine-layer>
 *    </map>
 */
/**
 * @ngdoc directive
 * @name fusion-tables-layer
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *   <map zoom="11" center="41.850033, -87.6500523">
 *     <fusion-tables-layer query="{
 *       select: 'Geocodable address',
 *       from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'}">
 *     </fusion-tables-layer>
 *   </map>
 */
/**
 * @ngdoc directive
 * @name heatmap-layer
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 *
 * <map zoom="11" center="[41.875696,-87.624207]">
 *   <heatmap-layer data="taxiData"></heatmap-layer>
 * </map>
 */
/**
 * @ngdoc directive
 * @name info-window
 * @param Attr2MapOptions {service}
 *   convert html attribute to Gogole map api options
 * @param $compile {service} $compile service
 * @description
 *  Defines infoWindow and provides compile method
 *
 *  Requires:  map directive
 *
 *  Restrict To:  Element
 *
 *  NOTE: this directive should **NOT** be used with `ng-repeat`
 *  because InfoWindow itself is a template, and a template must be
 *  reused by each marker, thus, should not be redefined repeatedly
 *  by `ng-repeat`.
 *
 * @attr {Boolean} visible
 *   Indicates to show it when map is initialized
 * @attr {Boolean} visible-on-marker
 *   Indicates to show it on a marker when map is initialized
 * @attr {Expression} geo-callback
 *   if position is an address, the expression is will be performed
 *   when geo-lookup is successful. e.g., geo-callback="showDetail()"
 * @attr {String} &lt;InfoWindowOption> Any InfoWindow options,
 *   https://developers.google.com/maps/documentation/javascript/reference?csw=1#InfoWindowOptions
 * @attr {String} &lt;InfoWindowEvent> Any InfoWindow events,
 *   https://developers.google.com/maps/documentation/javascript/reference
 * @example
 * Usage:
 *   <map MAP_ATTRIBUTES>
 *    <info-window id="foo" ANY_OPTIONS ANY_EVENTS"></info-window>
 *   </map>
 *
 * Example:
 *  <map center="41.850033,-87.6500523" zoom="3">
 *    <info-window id="1" position="41.850033,-87.6500523" >
 *      <div ng-non-bindable>
 *        Chicago, IL<br/>
 *        LatLng: {{chicago.lat()}}, {{chicago.lng()}}, <br/>
 *        World Coordinate: {{worldCoordinate.x}}, {{worldCoordinate.y}}, <br/>
 *        Pixel Coordinate: {{pixelCoordinate.x}}, {{pixelCoordinate.y}}, <br/>
 *        Tile Coordinate: {{tileCoordinate.x}}, {{tileCoordinate.y}} at Zoom Level {{map.getZoom()}}
 *      </div>
 *    </info-window>
 *  </map>
 */
/* global google */
/**
 * @ngdoc directive
 * @name kml-layer
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   renders Kml layer on a map
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @attr {Url} url url of the kml layer
 * @attr {KmlLayerOptions} KmlLayerOptions
 *   (https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions) 
 * @attr {String} &lt;KmlLayerEvent> Any KmlLayer events,
 *   https://developers.google.com/maps/documentation/javascript/reference
 * @example
 * Usage:
 *   <map MAP_ATTRIBUTES>
 *    <kml-layer ANY_KML_LAYER ANY_KML_LAYER_EVENTS"></kml-layer>
 *   </map>
 *
 * Example:
 *
 * <map zoom="11" center="[41.875696,-87.624207]">
 *   <kml-layer url="https://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" >
 *   </kml-layer>
 * </map>
 */
/**
 * @ngdoc directive
 * @name map-data
 * @param Attr2MapOptions {service}
 *   convert html attribute to Gogole map api options
 * @description
 *   set map data
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @wn {String} method-name, run map.data[method-name] with attribute value
 * @example
 * Example:
 *
 *  <map zoom="11" center="[41.875696,-87.624207]">
 *    <map-data load-geo-json="https://storage.googleapis.com/maps-devrel/google.json"></map-data>
 *   </map>
 */
/**
 * @ngdoc directive
 * @name map-lazy-load
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @description
 *  Requires: Delay the initialization of map directive
 *    until the map is ready to be rendered
 *  Restrict To: Attribute
 *
 * @attr {String} map-lazy-load
 *    Maps api script source file location.
 *    Example:
 *      'https://maps.google.com/maps/api/js'
 * @attr {String} map-lazy-load-params
 *   Maps api script source file location via angular scope variable.
 *   Also requires the map-lazy-load attribute to be present in the directive.
 *   Example: In your controller, set
 *     $scope.googleMapsURL = 'https://maps.google.com/maps/api/js?v=3.20&client=XXXXXenter-api-key-hereXXXX'
 *
 * @example
 * Example:
 *
 *   <div map-lazy-load="http://maps.google.com/maps/api/js">
 *     <map center="Brampton" zoom="10">
 *       <marker position="Brampton"></marker>
 *     </map>
 *   </div>
 *
 *   <div map-lazy-load="http://maps.google.com/maps/api/js"
 *        map-lazy-load-params="{{googleMapsUrl}}">
 *     <map center="Brampton" zoom="10">
 *       <marker position="Brampton"></marker>
 *     </map>
 *   </div>
 */
/* global window, document */
/**
 * @ngdoc directive
 * @name map-type
 * @param Attr2MapOptions {service} 
 *   convert html attribute to Google map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *
 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
 *     <map-type name="coordinate" object="coordinateMapType"></map-type>
 *   </map>
 */
/**
 * @ngdoc directive
 * @memberof ngMap
 * @name ng-map
 * @param Attr2Options {service}
 *  convert html attribute to Gogole map api options
 * @description
 * Implementation of {@link __MapController}
 * Initialize a Google map within a `<div>` tag
 *   with given options and register events
 *
 * @attr {Expression} map-initialized
 *   callback function when map is initialized
 *   e.g., map-initialized="mycallback(map)"
 * @attr {Expression} geo-callback if center is an address or current location,
 *   the expression is will be executed when geo-lookup is successful.
 *   e.g., geo-callback="showMyStoreInfo()"
 * @attr {Array} geo-fallback-center
 *   The center of map incase geolocation failed. i.e. [0,0]
 * @attr {Object} geo-location-options
 *  The navigator geolocation options.
 *  e.g., { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
 *  If none specified, { timeout: 5000 }.
 *  If timeout not specified, timeout: 5000 added
 * @attr {Boolean} zoom-to-include-markers
 *  When true, map boundary will be changed automatially
 *  to include all markers when initialized
 * @attr {Boolean} default-style
 *  When false, the default styling,
 *  `display:block;height:300px`, will be ignored.
 * @attr {String} &lt;MapOption> Any Google map options,
 *  https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions
 * @attr {String} &lt;MapEvent> Any Google map events,
 *  https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/map_events.html
 * @attr {Boolean} single-info-window
 *  When true the map will only display one info window at the time,
 *  if not set or false,
 *  everytime an info window is open it will be displayed with the othe one.
 * @attr {Boolean} trigger-resize
 *  Default to false.  Set to true to trigger resize of the map.  Needs to be done anytime you resize the map
 * @example
 * Usage:
 *   <map MAP_OPTIONS_OR_MAP_EVENTS ..>
 *     ... Any children directives
 *   </map>
 *
 * Example:
 *   <map center="[40.74, -74.18]" on-click="doThat()">
 *   </map>
 *
 *   <map geo-fallback-center="[40.74, -74.18]" zoom-to-inlude-markers="true">
 *   </map>
 */
/**
 * @ngdoc directive
 * @name maps-engine-layer
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *  <map zoom="14" center="[59.322506, 18.010025]">
 *    <maps-engine-layer layer-id="06673056454046135537-08896501997766553811">
 *    </maps-engine-layer>
 *  </map>
 */
/**
 * @ngdoc directive
 * @name marker
 * @param Attr2Options {service} convert html attribute to Gogole map api options
 * @param NavigatorGeolocation It is used to find the current location
 * @description
 *  Draw a Google map marker on a map with given options and register events
 *
 *  Requires:  map directive
 *
 *  Restrict To:  Element
 *
 * @attr {String} position address, 'current', or [latitude, longitude]
 *  example:
 *    '1600 Pennsylvania Ave, 20500  Washingtion DC',
 *    'current position',
 *    '[40.74, -74.18]'
 * @attr {Boolean} centered if set, map will be centered with this marker
 * @attr {Expression} geo-callback if position is an address,
 *   the expression is will be performed when geo-lookup is successful.
 *   e.g., geo-callback="showStoreInfo()"
 * @attr {Boolean} no-watcher if true, no attribute observer is added.
 *   Useful for many ng-repeat
 * @attr {String} &lt;MarkerOption>
 *   [Any Marker options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions)
 * @attr {String} &lt;MapEvent>
 *   [Any Marker events](https://developers.google.com/maps/documentation/javascript/reference)
 * @example
 * Usage:
 *   <map MAP_ATTRIBUTES>
 *    <marker ANY_MARKER_OPTIONS ANY_MARKER_EVENTS"></MARKER>
 *   </map>
 *
 * Example:
 *   <map center="[40.74, -74.18]">
 *    <marker position="[40.74, -74.18]" on-click="myfunc()"></div>
 *   </map>
 *
 *   <map center="the cn tower">
 *    <marker position="the cn tower" on-click="myfunc()"></div>
 *   </map>
 */
/* global google */
/**
 * @ngdoc directive
 * @name overlay-map-type
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @param $window {service}
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *
 * <map zoom="13" center="34.04924594193164, -118.24104309082031">
 *   <overlay-map-type index="0" object="coordinateMapType"></map-type>
 * </map>
 */
/**
 * @ngdoc directive
 * @name places-auto-complete
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   Provides address auto complete feature to an input element
 *   Requires: input tag
 *   Restrict To: Attribute
 *
 * @attr {AutoCompleteOptions}
 *   [Any AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/3.exp/reference#AutocompleteOptions)
 *
 * @example
 * Example:
 *   <script src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
 *   <input places-auto-complete types="['geocode']" on-place-changed="myCallback(place)" component-restrictions="{country:'au'}"/>
 */
/* global google */
/**
 * @ngdoc directive
 * @name shape
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   Initialize a Google map shape in map with given options and register events
 *   The shapes are:
 *     . circle
 *     . polygon
 *     . polyline
 *     . rectangle
 *     . groundOverlay(or image)
 *
 *   Requires:  map directive
 *
 *   Restrict To:  Element
 *
 * @attr {Boolean} centered if set, map will be centered with this marker
 * @attr {Expression} geo-callback if shape is a circle and the center is
 *   an address, the expression is will be performed when geo-lookup
 *   is successful. e.g., geo-callback="showDetail()"
 * @attr {String} &lt;OPTIONS>
 *   For circle, [any circle options](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions)
 *   For polygon, [any polygon options](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions)
 *   For polyline, [any polyline options](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions)
 *   For rectangle, [any rectangle options](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions)
 *   For image, [any groundOverlay options](https://developers.google.com/maps/documentation/javascript/reference#GroundOverlayOptions)
 * @attr {String} &lt;MapEvent> [Any Shape events](https://developers.google.com/maps/documentation/javascript/reference)
 * @example
 * Usage:
 *   <map MAP_ATTRIBUTES>
 *    <shape name=SHAPE_NAME ANY_SHAPE_OPTIONS ANY_SHAPE_EVENTS"></MARKER>
 *   </map>
 *
 * Example:
 *
 *   <map zoom="11" center="[40.74, -74.18]">
 *     <shape id="polyline" name="polyline" geodesic="true"
 *       stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
 *       path="[[40.74,-74.18],[40.64,-74.10],[40.54,-74.05],[40.44,-74]]" >
 *     </shape>
 *   </map>
 *
 *   <map zoom="11" center="[40.74, -74.18]">
 *     <shape id="polygon" name="polygon" stroke-color="#FF0000"
 *       stroke-opacity="1.0" stroke-weight="2"
 *       paths="[[40.74,-74.18],[40.64,-74.18],[40.84,-74.08],[40.74,-74.18]]" >
 *     </shape>
 *   </map>
 *
 *   <map zoom="11" center="[40.74, -74.18]">
 *     <shape id="rectangle" name="rectangle" stroke-color='#FF0000'
 *       stroke-opacity="0.8" stroke-weight="2"
 *       bounds="[[40.74,-74.18], [40.78,-74.14]]" editable="true" >
 *     </shape>
 *   </map>
 *
 *   <map zoom="11" center="[40.74, -74.18]">
 *     <shape id="circle" name="circle" stroke-color='#FF0000'
 *       stroke-opacity="0.8"stroke-weight="2"
 *       center="[40.70,-74.14]" radius="4000" editable="true" >
 *     </shape>
 *   </map>
 *
 *   <map zoom="11" center="[40.74, -74.18]">
 *     <shape id="image" name="image"
 *       url="https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg"
 *       bounds="[[40.71,-74.22],[40.77,-74.12]]" opacity="0.7"
 *       clickable="true">
 *     </shape>
 *   </map>
 *
 *  For full-working example, please visit
 *    [shape example](https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/shape.html)
 */
/* global google */
/**
 * @ngdoc directive
 * @name streetview-panorama
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @attr container Optional, id or css selector, if given, streetview will be in the given html element
 * @attr {String} &lt;StreetViewPanoramaOption>
 *   [Any Google StreetViewPanorama options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#StreetViewPanoramaOptions)
 * @attr {String} &lt;StreetViewPanoramaEvent>
 *   [Any Google StreetViewPanorama events](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)
 *
 * @example
 *   <map zoom="11" center="[40.688738,-74.043871]" >
 *     <street-view-panorama
 *       click-to-go="true"
 *       disable-default-ui="true"
 *       disable-double-click-zoom="true"
 *       enable-close-button="true"
 *       pano="my-pano"
 *       position="40.688738,-74.043871"
 *       pov="{heading:0, pitch: 90}"
 *       scrollwheel="false"
 *       visible="true">
 *     </street-view-panorama>
 *   </map>
 */
/* global google, document */
/**
 * @ngdoc directive
 * @name traffic-layer
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *
 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
 *     <traffic-layer></traffic-layer>
 *    </map>
 */
/**
 * @ngdoc directive
 * @name transit-layer
 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
 * @description
 *   Requires:  map directive
 *   Restrict To:  Element
 *
 * @example
 * Example:
 *
 *  <map zoom="13" center="34.04924594193164, -118.24104309082031">
 *    <transit-layer></transit-layer>
 *  </map>
 */
/**
 * @ngdoc filter
 * @name camel-case
 * @description
 *   Converts string to camel cased
 */
/**
 * @ngdoc filter
 * @name jsonize
 * @description
 *   Converts json-like string to json string
 */
/**
 * @ngdoc service
 * @name Attr2MapOptions
 * @description
 *   Converts tag attributes to options used by google api v3 objects
 */
/* global google */
/**
 * @ngdoc service
 * @name GeoCoder
 * @description
 *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
 *   service for Google Geocoder service
 */
/**
 * @ngdoc service
 * @name NavigatorGeolocation
 * @description
 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
 *  service for navigator.geolocation methods
 */
/* global google */
/**
 * @ngdoc factory
 * @name NgMapPool
 * @description
 *   Provide map instance to avoid memory leak
 */
/**
 * @ngdoc provider
 * @name NgMap
 * @description
 *  common utility service for ng-map
 */
/**
 * @ngdoc service
 * @name StreetView
 * @description
 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
 *  service for [Google StreetViewService]
 *  (https://developers.google.com/maps/documentation/javascript/streetview)
 */
return angular.module("ngMap",[]),function(){"use strict";var Attr2MapOptions,__MapController=function($scope,$element,$attrs,$parse,_Attr2MapOptions_,NgMap,NgMapPool){Attr2MapOptions=_Attr2MapOptions_;var vm=this;vm.mapOptions,/** @memberof __MapController */
vm.mapEvents,/** @memberof __MapController */
vm.eventListeners,/** @memberof __MapController */
/**
     * Add an object to the collection of group
     * @memberof __MapController
     * @function addObject
     * @param groupName the name of collection that object belongs to
     * @param obj  an object to add into a collection, i.e. marker, shape
     */
vm.addObject=function(groupName,obj){if(vm.map){vm.map[groupName]=vm.map[groupName]||{};var len=Object.keys(vm.map[groupName]).length;vm.map[groupName][obj.id||len]=obj,vm.map instanceof google.maps.Map&&(
//infoWindow.setMap works like infoWindow.open
"infoWindows"!=groupName&&obj.setMap&&obj.setMap&&obj.setMap(vm.map),obj.centered&&obj.position&&vm.map.setCenter(obj.position),"markers"==groupName&&vm.objectChanged("markers"),"customMarkers"==groupName&&vm.objectChanged("customMarkers"))}},/**
     * Delete an object from the collection and remove from map
     * @memberof __MapController
     * @function deleteObject
     * @param {Array} objs the collection of objects. i.e., map.markers
     * @param {Object} obj the object to be removed. i.e., marker
     */
vm.deleteObject=function(groupName,obj){/* delete from group */
if(obj.map){var objs=obj.map[groupName];for(var name in objs)objs[name]===obj&&(google.maps.event.clearInstanceListeners(obj),delete objs[name]);/* delete from map */
obj.map&&obj.setMap&&obj.setMap(null),"markers"==groupName&&vm.objectChanged("markers"),"customMarkers"==groupName&&vm.objectChanged("customMarkers")}},/**
     * @memberof __MapController
     * @function observeAttrSetObj
     * @param {Hash} orgAttrs attributes before its initialization
     * @param {Hash} attrs    attributes after its initialization
     * @param {Object} obj    map object that an action is to be done
     * @description watch changes of attribute values and
     * do appropriate action based on attribute name
     */
vm.observeAttrSetObj=function(orgAttrs,attrs,obj){if(attrs.noWatcher)return!1;for(var attrsToObserve=Attr2MapOptions.getAttrsToObserve(orgAttrs),i=0;i<attrsToObserve.length;i++){var attrName=attrsToObserve[i];attrs.$observe(attrName,NgMap.observeAndSet(attrName,obj))}},/**
     * @memberof __MapController
     * @function zoomToIncludeMarkers
     */
vm.zoomToIncludeMarkers=function(){
// Only fit to bounds if we have any markers
// object.keys is supported in all major browsers (IE9+)
if(null!=vm.map.markers&&Object.keys(vm.map.markers).length>0||null!=vm.map.customMarkers&&Object.keys(vm.map.customMarkers).length>0){var bounds=new google.maps.LatLngBounds;for(var k1 in vm.map.markers)bounds.extend(vm.map.markers[k1].getPosition());for(var k2 in vm.map.customMarkers)bounds.extend(vm.map.customMarkers[k2].getPosition());vm.mapOptions.maximumZoom&&(vm.enableMaximumZoomCheck=!0),vm.map.fitBounds(bounds)}},/**
     * @memberof __MapController
     * @function objectChanged
     * @param {String} group name of group e.g., markers
     */
vm.objectChanged=function(group){!vm.map||"markers"!=group&&"customMarkers"!=group||"auto"!=vm.map.zoomToIncludeMarkers||vm.zoomToIncludeMarkers()},/**
     * @memberof __MapController
     * @function initializeMap
     * @description
     *  . initialize Google map on <div> tag
     *  . set map options, events, and observers
     *  . reset zoom to include all (custom)markers
     */
vm.initializeMap=function(){var mapOptions=vm.mapOptions,mapEvents=vm.mapEvents,lazyInitMap=vm.map;
// set objects for lazyInit
if(//prepared for lazy init
vm.map=NgMapPool.getMapInstance($element[0]),NgMap.setStyle($element[0]),lazyInitMap){/**
         * rebuild mapOptions for lazyInit
         * because attributes values might have been changed
         */
var filtered=Attr2MapOptions.filter($attrs),options=Attr2MapOptions.getOptions(filtered),controlOptions=Attr2MapOptions.getControlOptions(filtered);mapOptions=angular.extend(options,controlOptions);for(var group in lazyInitMap){var groupMembers=lazyInitMap[group];//e.g. markers
if("object"==typeof groupMembers)for(var id in groupMembers)vm.addObject(group,groupMembers[id])}vm.map.showInfoWindow=vm.showInfoWindow,vm.map.hideInfoWindow=vm.hideInfoWindow}
// set options
mapOptions.zoom=mapOptions.zoom||15;var center=mapOptions.center;if(!mapOptions.center||"string"==typeof center&&center.match(/\{\{.*\}\}/))mapOptions.center=new google.maps.LatLng(0,0);else if("string"==typeof center&&center.match(/[0-9.-]*,[0-9.-]*/))mapOptions.center=new google.maps.LatLng(center);else if(!(center instanceof google.maps.LatLng)){var geoCenter=mapOptions.center;delete mapOptions.center,NgMap.getGeoLocation(geoCenter,mapOptions.geoLocationOptions).then(function(latlng){vm.map.setCenter(latlng);var geoCallback=mapOptions.geoCallback;geoCallback&&$parse(geoCallback)($scope)},function(){mapOptions.geoFallbackCenter&&vm.map.setCenter(mapOptions.geoFallbackCenter)})}vm.map.setOptions(mapOptions);
// set events
for(var eventName in mapEvents){var event=mapEvents[eventName],listener=google.maps.event.addListener(vm.map,eventName,event);vm.eventListeners[eventName]=listener}
// set observers
vm.observeAttrSetObj(orgAttrs,$attrs,vm.map),vm.singleInfoWindow=mapOptions.singleInfoWindow,google.maps.event.trigger(vm.map,"resize"),google.maps.event.addListenerOnce(vm.map,"idle",function(){NgMap.addMap(vm),mapOptions.zoomToIncludeMarkers&&vm.zoomToIncludeMarkers(),
//TODO: it's for backward compatibiliy. will be removed
$scope.map=vm.map,$scope.$emit("mapInitialized",vm.map),
//callback
$attrs.mapInitialized&&$parse($attrs.mapInitialized)($scope,{map:vm.map})}),
//add maximum zoom listeners if zoom-to-include-markers and and maximum-zoom are valid attributes
mapOptions.zoomToIncludeMarkers&&mapOptions.maximumZoom&&google.maps.event.addListener(vm.map,"zoom_changed",function(){1==vm.enableMaximumZoomCheck&&(vm.enableMaximumZoomCheck=!1,google.maps.event.addListenerOnce(vm.map,"bounds_changed",function(){vm.map.setZoom(Math.min(mapOptions.maximumZoom,vm.map.getZoom()))}))})},$scope.google=google;//used by $scope.eval to avoid eval()
/**
     * get map options and events
     */
var orgAttrs=Attr2MapOptions.orgAttributes($element),filtered=Attr2MapOptions.filter($attrs),options=Attr2MapOptions.getOptions(filtered,{scope:$scope}),controlOptions=Attr2MapOptions.getControlOptions(filtered),mapOptions=angular.extend(options,controlOptions),mapEvents=Attr2MapOptions.getEvents($scope,filtered);if(Object.keys(mapEvents).length&&void 0,vm.mapOptions=mapOptions,vm.mapEvents=mapEvents,vm.eventListeners={},options.lazyInit){// allows controlled initialization
// parse angular expression for dynamic ids
if($attrs.id&&
// starts with, at position 0
0===$attrs.id.indexOf("{{",0)&&
// ends with
$attrs.id.indexOf("}}",$attrs.id.length-"}}".length)!==-1)var idExpression=$attrs.id.slice(2,-2),mapId=$parse(idExpression)($scope);else var mapId=$attrs.id;vm.map={id:mapId},//set empty, not real, map
NgMap.addMap(vm)}else vm.initializeMap();
//Trigger Resize
options.triggerResize&&google.maps.event.trigger(vm.map,"resize"),$element.bind("$destroy",function(){NgMapPool.returnMapInstance(vm.map),NgMap.deleteMap(vm)})};// __MapController
__MapController.$inject=["$scope","$element","$attrs","$parse","Attr2MapOptions","NgMap","NgMapPool"],angular.module("ngMap").controller("__MapController",__MapController)}(),function(){"use strict";var parser,linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),layer=getLayer(options,events);mapController.addObject("bicyclingLayers",layer),mapController.observeAttrSetObj(orgAttrs,attrs,layer),//observers
element.bind("$destroy",function(){mapController.deleteObject("bicyclingLayers",layer)})},getLayer=function(options,events){var layer=new google.maps.BicyclingLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer},bicyclingLayer=function(Attr2MapOptions){return parser=Attr2MapOptions,{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};bicyclingLayer.$inject=["Attr2MapOptions"],angular.module("ngMap").directive("bicyclingLayer",bicyclingLayer)}(),function(){"use strict";var parser,$compile,NgMap,linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),customControlEl=element[0].parentElement.removeChild(element[0]);$compile(customControlEl.innerHTML.trim())(scope);/**
     * set events
     */
for(var eventName in events)google.maps.event.addDomListener(customControlEl,eventName,events[eventName]);mapController.addObject("customControls",customControlEl);var position=options.position;mapController.map.controls[google.maps.ControlPosition[position]].push(customControlEl),element.bind("$destroy",function(){mapController.deleteObject("customControls",customControlEl)})},customControl=function(Attr2MapOptions,_$compile_,_NgMap_){return parser=Attr2MapOptions,$compile=_$compile_,NgMap=_NgMap_,{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};customControl.$inject=["Attr2MapOptions","$compile","NgMap"],angular.module("ngMap").directive("customControl",customControl)}(),function(){"use strict";var parser,$timeout,$compile,NgMap,CustomMarker=function(options){options=options||{},this.el=document.createElement("div"),this.el.style.display="inline-block",this.el.style.visibility="hidden",this.visible=!0;for(var key in options)/* jshint ignore:line */
this[key]=options[key]},setCustomMarker=function(){CustomMarker.prototype=new google.maps.OverlayView,CustomMarker.prototype.setContent=function(html,scope){this.el.innerHTML=html,this.el.style.position="absolute",scope&&$compile(angular.element(this.el).contents())(scope)},CustomMarker.prototype.getDraggable=function(){return this.draggable},CustomMarker.prototype.setDraggable=function(draggable){this.draggable=draggable},CustomMarker.prototype.getPosition=function(){return this.position},CustomMarker.prototype.setPosition=function(position){/* jshint ignore:line */
if(position&&(this.position=position),this.getProjection()&&"function"==typeof this.position.lng){var _this=this,setPosition=function(){var posPixel=_this.getProjection().fromLatLngToDivPixel(_this.position),x=Math.round(posPixel.x-_this.el.offsetWidth/2),y=Math.round(posPixel.y-_this.el.offsetHeight-10);// 10px for anchor
_this.el.style.left=x+"px",_this.el.style.top=y+"px",_this.el.style.visibility="visible"};_this.el.offsetWidth&&_this.el.offsetHeight?setPosition():
//delayed left/top calculation when width/height are not set instantly
$timeout(setPosition,300)}},CustomMarker.prototype.setZIndex=function(zIndex){zIndex&&(this.zIndex=zIndex),/* jshint ignore:line */
this.el.style.zIndex=this.zIndex},CustomMarker.prototype.getVisible=function(){return this.visible},CustomMarker.prototype.setVisible=function(visible){this.el.style.display=visible?"inline-block":"none",this.visible=visible},CustomMarker.prototype.addClass=function(className){var classNames=this.el.className.trim().split(" ");classNames.indexOf(className)==-1&&classNames.push(className),/* jshint ignore:line */
this.el.className=classNames.join(" ")},CustomMarker.prototype.removeClass=function(className){var classNames=this.el.className.split(" "),index=classNames.indexOf(className);index>-1&&classNames.splice(index,1),/* jshint ignore:line */
this.el.className=classNames.join(" ")},CustomMarker.prototype.onAdd=function(){this.getPanes().overlayMouseTarget.appendChild(this.el)},CustomMarker.prototype.draw=function(){this.setPosition(),this.setZIndex(this.zIndex),this.setVisible(this.visible)},CustomMarker.prototype.onRemove=function(){this.el.parentNode.removeChild(this.el)}},linkFunc=function(orgHtml,varsToWatch){
//console.log('orgHtml', orgHtml, 'varsToWatch', varsToWatch);
return function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered);/**
       * build a custom marker element
       */
element[0].style.display="none";var customMarker=new CustomMarker(options);$timeout(function(){//apply contents, class, and location after it is compiled
scope.$watch("["+varsToWatch.join(",")+"]",function(){customMarker.setContent(orgHtml,scope)},!0),customMarker.setContent(element[0].innerHTML,scope);var classNames=element[0].firstElementChild.className;customMarker.addClass("custom-marker"),customMarker.addClass(classNames),options.position instanceof google.maps.LatLng||NgMap.getGeoLocation(options.position).then(function(latlng){customMarker.setPosition(latlng)})});for(var eventName in events)/* jshint ignore:line */
google.maps.event.addDomListener(customMarker.el,eventName,events[eventName]);mapController.addObject("customMarkers",customMarker),
//set observers
mapController.observeAttrSetObj(orgAttrs,attrs,customMarker),element.bind("$destroy",function(){
//Is it required to remove event listeners when DOM is removed?
mapController.deleteObject("customMarkers",customMarker)})}},customMarkerDirective=function(_$timeout_,_$compile_,Attr2MapOptions,_NgMap_){return parser=Attr2MapOptions,$timeout=_$timeout_,$compile=_$compile_,NgMap=_NgMap_,{restrict:"E",require:["?^map","?^ngMap"],compile:function(element){setCustomMarker(),element[0].style.display="none";var orgHtml=element.html(),matches=orgHtml.match(/{{([^}]+)}}/g),varsToWatch=[];
//filter out that contains '::', 'this.'
return(matches||[]).forEach(function(match){var toWatch=match.replace("{{","").replace("}}","");match.indexOf("::")==-1&&match.indexOf("this.")==-1&&varsToWatch.indexOf(toWatch)==-1&&varsToWatch.push(match.replace("{{","").replace("}}",""))}),linkFunc(orgHtml,varsToWatch)}}};// function
customMarkerDirective.$inject=["$timeout","$compile","Attr2MapOptions","NgMap"],angular.module("ngMap").directive("customMarker",customMarkerDirective)}(),function(){"use strict";var NgMap,$timeout,NavigatorGeolocation,getDirectionsRenderer=function(options,events){options.panel&&(options.panel=document.getElementById(options.panel)||document.querySelector(options.panel));var renderer=new google.maps.DirectionsRenderer(options);for(var eventName in events)google.maps.event.addListener(renderer,eventName,events[eventName]);return renderer},updateRoute=function(renderer,options){var directionsService=new google.maps.DirectionsService,request=options;request.travelMode=request.travelMode||"DRIVING";var validKeys=["origin","destination","travelMode","transitOptions","unitSystem","durationInTraffic","waypoints","optimizeWaypoints","provideRouteAlternatives","avoidHighways","avoidTolls","region"];for(var key in request)validKeys.indexOf(key)===-1&&delete request[key];request.waypoints&&(
// Check fo valid values
"[]"!=request.waypoints&&""!==request.waypoints||delete request.waypoints);var showDirections=function(request){directionsService.route(request,function(response,status){status==google.maps.DirectionsStatus.OK&&$timeout(function(){renderer.setDirections(response)})})};request.origin&&request.destination&&("current-location"==request.origin?NavigatorGeolocation.getCurrentPosition().then(function(ll){request.origin=new google.maps.LatLng(ll.coords.latitude,ll.coords.longitude),showDirections(request)}):"current-location"==request.destination?NavigatorGeolocation.getCurrentPosition().then(function(ll){request.destination=new google.maps.LatLng(ll.coords.latitude,ll.coords.longitude),showDirections(request)}):showDirections(request))},directions=function(Attr2MapOptions,_$timeout_,_NavigatorGeolocation_,_NgMap_){var parser=Attr2MapOptions;NgMap=_NgMap_,$timeout=_$timeout_,NavigatorGeolocation=_NavigatorGeolocation_;var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),attrsToObserve=parser.getAttrsToObserve(orgAttrs),renderer=getDirectionsRenderer(options,events);mapController.addObject("directionsRenderers",renderer),attrsToObserve.forEach(function(attrName){!function(attrName){attrs.$observe(attrName,function(val){if("panel"==attrName)$timeout(function(){var panel=document.getElementById(val)||document.querySelector(val);panel&&renderer.setPanel(panel)});else if(options[attrName]!==val){//apply only if changed
var optionValue=parser.toOptionValue(val,{key:attrName});options[attrName]=optionValue,updateRoute(renderer,options)}})}(attrName)}),NgMap.getMap().then(function(){updateRoute(renderer,options)}),element.bind("$destroy",function(){mapController.deleteObject("directionsRenderers",renderer)})};return{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};// var directions
directions.$inject=["Attr2MapOptions","$timeout","NavigatorGeolocation","NgMap"],angular.module("ngMap").directive("directions",directions)}(),function(){"use strict";angular.module("ngMap").directive("drawingManager",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions;return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),controlOptions=parser.getControlOptions(filtered),events=parser.getEvents(scope,filtered),drawingManager=new google.maps.drawing.DrawingManager({drawingMode:options.drawingmode,drawingControl:options.drawingcontrol,drawingControlOptions:controlOptions.drawingControlOptions,circleOptions:options.circleoptions,markerOptions:options.markeroptions,polygonOptions:options.polygonoptions,polylineOptions:options.polylineoptions,rectangleOptions:options.rectangleoptions});
//Observers
attrs.$observe("drawingControlOptions",function(newValue){drawingManager.drawingControlOptions=parser.getControlOptions({drawingControlOptions:newValue}).drawingControlOptions,drawingManager.setDrawingMode(null),drawingManager.setMap(mapController.map)});/**
         * set events
         */
for(var eventName in events)google.maps.event.addListener(drawingManager,eventName,events[eventName]);mapController.addObject("mapDrawingManager",drawingManager),element.bind("$destroy",function(){mapController.deleteObject("mapDrawingManager",drawingManager)})}}}])}(),function(){"use strict";angular.module("ngMap").directive("dynamicMapsEngineLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getDynamicMapsEngineLayer=function(options,events){var layer=new google.maps.visualization.DynamicMapsEngineLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered,events),layer=getDynamicMapsEngineLayer(options,events);mapController.addObject("mapsEngineLayers",layer)}}}])}(),function(){"use strict";angular.module("ngMap").directive("fusionTablesLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getLayer=function(options,events){var layer=new google.maps.FusionTablesLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered,events),layer=getLayer(options,events);mapController.addObject("fusionTablesLayers",layer)}}}])}(),function(){"use strict";angular.module("ngMap").directive("heatmapLayer",["Attr2MapOptions","$window",function(Attr2MapOptions,$window){var parser=Attr2MapOptions;return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope});if(options.data=$window[attrs.data]||scope[attrs.data],!(options.data instanceof Array))throw"invalid heatmap data";options.data=new google.maps.MVCArray(options.data);var layer=new google.maps.visualization.HeatmapLayer(options);parser.getEvents(scope,filtered);mapController.addObject("heatmapLayers",layer)}}}])}(),function(){"use strict";var infoWindow=function(Attr2MapOptions,$compile,$q,$templateRequest,$timeout,$parse,NgMap){var parser=Attr2MapOptions,getInfoWindow=function(options,events,element){var infoWindow;/**
       * set options
       */
!options.position||options.position instanceof google.maps.LatLng||delete options.position,infoWindow=new google.maps.InfoWindow(options);/**
       * set events
       */
for(var eventName in events)eventName&&google.maps.event.addListener(infoWindow,eventName,events[eventName]);/**
       * set template and template-related functions
       * it must have a container element with ng-non-bindable
       */
var templatePromise=$q(function(resolve){angular.isString(element)?$templateRequest(element).then(function(requestedTemplate){resolve(angular.element(requestedTemplate).wrap("<div>").parent())},function(message){throw"info-window template request failed: "+message}):resolve(element)}).then(function(resolvedTemplate){var template=resolvedTemplate.html().trim();if(1!=angular.element(template).length)throw"info-window working as a template must have a container";infoWindow.__template=template.replace(/\s?ng-non-bindable[='"]+/,"")});return infoWindow.__open=function(map,scope,anchor){templatePromise.then(function(){$timeout(function(){anchor&&(scope.anchor=anchor);var el=$compile(infoWindow.__template)(scope);infoWindow.setContent(el[0]),scope.$apply(),anchor&&anchor.getPosition?infoWindow.open(map,anchor):anchor&&anchor instanceof google.maps.LatLng?(infoWindow.open(map),infoWindow.setPosition(anchor)):infoWindow.open(map);var infoWindowContainerEl=infoWindow.content.parentElement.parentElement.parentElement;infoWindowContainerEl.className="ng-map-info-window"})})},infoWindow},linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1],element.css("display","none");var address,orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),infoWindow=getInfoWindow(options,events,options.template||element);!options.position||options.position instanceof google.maps.LatLng||(address=options.position),address&&NgMap.getGeoLocation(address).then(function(latlng){infoWindow.setPosition(latlng),infoWindow.__open(mapController.map,scope,latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope)}),mapController.addObject("infoWindows",infoWindow),mapController.observeAttrSetObj(orgAttrs,attrs,infoWindow),mapController.showInfoWindow=mapController.map.showInfoWindow=mapController.showInfoWindow||function(p1,p2,p3){//event, id, marker
var id="string"==typeof p1?p1:p2,marker="string"==typeof p1?p2:p3;if("string"==typeof marker)
//Check if markers if defined to avoid odd 'undefined' errors
if("undefined"!=typeof mapController.map.markers&&"undefined"!=typeof mapController.map.markers[marker])marker=mapController.map.markers[marker];else{if("undefined"==typeof mapController.map.customMarkers[marker])
//Better error output if marker with that id is not defined
throw new Error("Cant open info window for id "+marker+". Marker or CustomMarker is not defined");marker=mapController.map.customMarkers[marker]}var infoWindow=mapController.map.infoWindows[id],anchor=marker?marker:this.getPosition?this:null;infoWindow.__open(mapController.map,scope,anchor),mapController.singleInfoWindow&&(mapController.lastInfoWindow&&scope.hideInfoWindow(mapController.lastInfoWindow),mapController.lastInfoWindow=id)},mapController.hideInfoWindow=mapController.map.hideInfoWindow=mapController.hideInfoWindow||function(p1,p2){var id="string"==typeof p1?p1:p2,infoWindow=mapController.map.infoWindows[id];infoWindow.close()},
//TODO DEPRECATED
scope.showInfoWindow=mapController.map.showInfoWindow,scope.hideInfoWindow=mapController.map.hideInfoWindow;var map=infoWindow.mapId?{id:infoWindow.mapId}:0;NgMap.getMap(map).then(function(map){if(infoWindow.visible&&infoWindow.__open(map,scope),infoWindow.visibleOnMarker){var markerId=infoWindow.visibleOnMarker;infoWindow.__open(map,scope,map.markers[markerId])}})};//link
return{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};// infoWindow
infoWindow.$inject=["Attr2MapOptions","$compile","$q","$templateRequest","$timeout","$parse","NgMap"],angular.module("ngMap").directive("infoWindow",infoWindow)}(),function(){"use strict";angular.module("ngMap").directive("kmlLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getKmlLayer=function(options,events){var kmlLayer=new google.maps.KmlLayer(options);for(var eventName in events)google.maps.event.addListener(kmlLayer,eventName,events[eventName]);return kmlLayer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),kmlLayer=getKmlLayer(options,events);mapController.addObject("kmlLayers",kmlLayer),mapController.observeAttrSetObj(orgAttrs,attrs,kmlLayer),//observers
element.bind("$destroy",function(){mapController.deleteObject("kmlLayers",kmlLayer)})}}}])}(),function(){"use strict";angular.module("ngMap").directive("mapData",["Attr2MapOptions","NgMap",function(Attr2MapOptions,NgMap){var parser=Attr2MapOptions;return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs){var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered,events);NgMap.getMap().then(function(map){
//options
for(var key in options){var val=options[key];"function"==typeof scope[val]?map.data[key](scope[val]):map.data[key](val)}
//events
for(var eventName in events)map.data.addListener(eventName,events[eventName])})}}}])}(),function(){"use strict";var $timeout,$compile,src,savedHtml=[],elements=[],preLinkFunc=function(scope,element,attrs){var mapsUrl=attrs.mapLazyLoadParams||attrs.mapLazyLoad;if(void 0===window.google||void 0===window.google.maps){elements.push({scope:scope,element:element,savedHtml:savedHtml[elements.length]}),window.lazyLoadCallback=function(){$timeout(function(){/* give some time to load */
elements.forEach(function(elm){elm.element.html(elm.savedHtml),$compile(elm.element.contents())(elm.scope)})},100)};var scriptEl=document.createElement("script");scriptEl.src=mapsUrl+(mapsUrl.indexOf("?")>-1?"&":"?")+"callback=lazyLoadCallback",document.querySelector('script[src="'+scriptEl.src+'"]')||document.body.appendChild(scriptEl)}else element.html(savedHtml),$compile(element.contents())(scope)},compileFunc=function(tElement,tAttrs){/**
     * if already loaded, stop processing it
     */
/**
     * if already loaded, stop processing it
     */
return!tAttrs.mapLazyLoad&&void 0,savedHtml.push(tElement.html()),src=tAttrs.mapLazyLoad,(void 0===window.google||void 0===window.google.maps)&&(tElement.html(""),{pre:preLinkFunc})},mapLazyLoad=function(_$compile_,_$timeout_){return $compile=_$compile_,$timeout=_$timeout_,{compile:compileFunc}};mapLazyLoad.$inject=["$compile","$timeout"],angular.module("ngMap").directive("mapLazyLoad",mapLazyLoad)}(),function(){"use strict";angular.module("ngMap").directive("mapType",["$parse","NgMap",function($parse,NgMap){return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var mapTypeObject,mapTypeName=attrs.name;if(!mapTypeName)throw"invalid map-type name";if(mapTypeObject=$parse(attrs.object)(scope),!mapTypeObject)throw"invalid map-type object";NgMap.getMap().then(function(map){map.mapTypes.set(mapTypeName,mapTypeObject)}),mapController.addObject("mapTypes",mapTypeObject)}}}])}(),function(){"use strict";var mapDirective=function(){return{restrict:"AE",controller:"__MapController",controllerAs:"ngmap"}};angular.module("ngMap").directive("map",[mapDirective]),angular.module("ngMap").directive("ngMap",[mapDirective])}(),function(){"use strict";angular.module("ngMap").directive("mapsEngineLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getMapsEngineLayer=function(options,events){var layer=new google.maps.visualization.MapsEngineLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered,events),layer=getMapsEngineLayer(options,events);mapController.addObject("mapsEngineLayers",layer)}}}])}(),function(){"use strict";var parser,$parse,NgMap,getMarker=function(options,events){var marker;if(NgMap.defaultOptions.marker)for(var key in NgMap.defaultOptions.marker)"undefined"==typeof options[key]&&(options[key]=NgMap.defaultOptions.marker[key]);options.position instanceof google.maps.LatLng||(options.position=new google.maps.LatLng(0,0)),marker=new google.maps.Marker(options),Object.keys(events).length>0;for(var eventName in events)eventName&&google.maps.event.addListener(marker,eventName,events[eventName]);return marker},linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var address,orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),markerOptions=parser.getOptions(filtered,scope,{scope:scope}),markerEvents=parser.getEvents(scope,filtered);markerOptions.position instanceof google.maps.LatLng||(address=markerOptions.position);var marker=getMarker(markerOptions,markerEvents);mapController.addObject("markers",marker),address&&NgMap.getGeoLocation(address).then(function(latlng){marker.setPosition(latlng),markerOptions.centered&&marker.map.setCenter(latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope)}),
//set observers
mapController.observeAttrSetObj(orgAttrs,attrs,marker),/* observers */
element.bind("$destroy",function(){mapController.deleteObject("markers",marker)})},marker=function(Attr2MapOptions,_$parse_,_NgMap_){return parser=Attr2MapOptions,$parse=_$parse_,NgMap=_NgMap_,{restrict:"E",require:["^?map","?^ngMap"],link:linkFunc}};marker.$inject=["Attr2MapOptions","$parse","NgMap"],angular.module("ngMap").directive("marker",marker)}(),function(){"use strict";angular.module("ngMap").directive("overlayMapType",["NgMap",function(NgMap){return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var initMethod=attrs.initMethod||"insertAt",overlayMapTypeObject=scope[attrs.object];NgMap.getMap().then(function(map){if("insertAt"==initMethod){var index=parseInt(attrs.index,10);map.overlayMapTypes.insertAt(index,overlayMapTypeObject)}else"push"==initMethod&&map.overlayMapTypes.push(overlayMapTypeObject)}),mapController.addObject("overlayMapTypes",overlayMapTypeObject)}}}])}(),function(){"use strict";var placesAutoComplete=function(Attr2MapOptions,$timeout){var parser=Attr2MapOptions,linkFunc=function(scope,element,attrs,ngModelCtrl){if("false"===attrs.placesAutoComplete)return!1;var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),autocomplete=new google.maps.places.Autocomplete(element[0],options);for(var eventName in events)google.maps.event.addListener(autocomplete,eventName,events[eventName]);var updateModel=function(){$timeout(function(){ngModelCtrl&&ngModelCtrl.$setViewValue(element.val())},100)};google.maps.event.addListener(autocomplete,"place_changed",updateModel),element[0].addEventListener("change",updateModel),attrs.$observe("types",function(val){if(val){var optionValue=parser.toOptionValue(val,{key:"types"});autocomplete.setTypes(optionValue)}}),attrs.$observe("componentRestrictions",function(val){val&&autocomplete.setComponentRestrictions(scope.$eval(val))})};return{restrict:"A",require:"?ngModel",link:linkFunc}};placesAutoComplete.$inject=["Attr2MapOptions","$timeout"],angular.module("ngMap").directive("placesAutoComplete",placesAutoComplete)}(),function(){"use strict";var getShape=function(options,events){var shape,shapeName=options.name;/**
     * set options
     */
switch(delete options.name,shapeName){case"circle":options.center instanceof google.maps.LatLng||(options.center=new google.maps.LatLng(0,0)),shape=new google.maps.Circle(options);break;case"polygon":shape=new google.maps.Polygon(options);break;case"polyline":shape=new google.maps.Polyline(options);break;case"rectangle":shape=new google.maps.Rectangle(options);break;case"groundOverlay":case"image":var url=options.url,opts={opacity:options.opacity,clickable:options.clickable,id:options.id};shape=new google.maps.GroundOverlay(url,options.bounds,opts)}/**
     * set events
     */
for(var eventName in events)events[eventName]&&google.maps.event.addListener(shape,eventName,events[eventName]);return shape},shape=function(Attr2MapOptions,$parse,NgMap){var parser=Attr2MapOptions,linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var address,shapeType,orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),shapeOptions=parser.getOptions(filtered,{scope:scope}),shapeEvents=parser.getEvents(scope,filtered);shapeType=shapeOptions.name,shapeOptions.center instanceof google.maps.LatLng||(address=shapeOptions.center);var shape=getShape(shapeOptions,shapeEvents);mapController.addObject("shapes",shape),address&&"circle"==shapeType&&NgMap.getGeoLocation(address).then(function(latlng){shape.setCenter(latlng),shape.centered&&shape.map.setCenter(latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope)}),
//set observers
mapController.observeAttrSetObj(orgAttrs,attrs,shape),element.bind("$destroy",function(){mapController.deleteObject("shapes",shape)})};return{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};shape.$inject=["Attr2MapOptions","$parse","NgMap"],angular.module("ngMap").directive("shape",shape)}(),function(){"use strict";var streetViewPanorama=function(Attr2MapOptions,NgMap){var parser=Attr2MapOptions,getStreetViewPanorama=function(map,options,events){var svp,container;options.container&&(container=document.getElementById(options.container),container=container||document.querySelector(options.container)),container?svp=new google.maps.StreetViewPanorama(container,options):(svp=map.getStreetView(),svp.setOptions(options));for(var eventName in events)eventName&&google.maps.event.addListener(svp,eventName,events[eventName]);return svp},linkFunc=function(scope,element,attrs){var filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),controlOptions=parser.getControlOptions(filtered),svpOptions=angular.extend(options,controlOptions),svpEvents=parser.getEvents(scope,filtered);NgMap.getMap().then(function(map){var svp=getStreetViewPanorama(map,svpOptions,svpEvents);map.setStreetView(svp),!svp.getPosition()&&svp.setPosition(map.getCenter()),google.maps.event.addListener(svp,"position_changed",function(){svp.getPosition()!==map.getCenter()&&map.setCenter(svp.getPosition())});
//needed for geo-callback
var listener=google.maps.event.addListener(map,"center_changed",function(){svp.setPosition(map.getCenter()),google.maps.event.removeListener(listener)})})};//link
return{restrict:"E",require:["?^map","?^ngMap"],link:linkFunc}};streetViewPanorama.$inject=["Attr2MapOptions","NgMap"],angular.module("ngMap").directive("streetViewPanorama",streetViewPanorama)}(),function(){"use strict";angular.module("ngMap").directive("trafficLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getLayer=function(options,events){var layer=new google.maps.TrafficLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),layer=getLayer(options,events);mapController.addObject("trafficLayers",layer),mapController.observeAttrSetObj(orgAttrs,attrs,layer),//observers
element.bind("$destroy",function(){mapController.deleteObject("trafficLayers",layer)})}}}])}(),function(){"use strict";angular.module("ngMap").directive("transitLayer",["Attr2MapOptions",function(Attr2MapOptions){var parser=Attr2MapOptions,getLayer=function(options,events){var layer=new google.maps.TransitLayer(options);for(var eventName in events)google.maps.event.addListener(layer,eventName,events[eventName]);return layer};return{restrict:"E",require:["?^map","?^ngMap"],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element),filtered=parser.filter(attrs),options=parser.getOptions(filtered,{scope:scope}),events=parser.getEvents(scope,filtered),layer=getLayer(options,events);mapController.addObject("transitLayers",layer),mapController.observeAttrSetObj(orgAttrs,attrs,layer),//observers
element.bind("$destroy",function(){mapController.deleteObject("transitLayers",layer)})}}}])}(),function(){"use strict";var SPECIAL_CHARS_REGEXP=/([\:\-\_]+(.))/g,MOZ_HACK_REGEXP=/^moz([A-Z])/,camelCaseFilter=function(){return function(name){return name.replace(SPECIAL_CHARS_REGEXP,function(_,separator,letter,offset){return offset?letter.toUpperCase():letter}).replace(MOZ_HACK_REGEXP,"Moz$1")}};angular.module("ngMap").filter("camelCase",camelCaseFilter)}(),function(){"use strict";var jsonizeFilter=function(){return function(str){try{// if parsable already, return as it is
return JSON.parse(str),str}catch(e){// if not parsable, change little
return str.replace(/([\$\w]+)\s*:/g,function(_,$1){return'"'+$1+'":'}).replace(/'([^']+)'/g,function(_,$1){return'"'+$1+'"'})}}};angular.module("ngMap").filter("jsonize",jsonizeFilter)}(),function(){"use strict";
//i.e. "2015-08-12T06:12:40.858Z"
var isoDateRE=/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/,Attr2MapOptions=function($parse,$timeout,$log,NavigatorGeolocation,GeoCoder,camelCaseFilter,jsonizeFilter){/**
     * Returns the attributes of an element as hash
     * @memberof Attr2MapOptions
     * @param {HTMLElement} el html element
     * @returns {Hash} attributes
     */
var orgAttributes=function(el){el.length>0&&(el=el[0]);for(var orgAttributes={},i=0;i<el.attributes.length;i++){var attr=el.attributes[i];orgAttributes[attr.name]=attr.value}return orgAttributes},getJSON=function(input){var re=/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/;//lat,lng
return input.match(re)&&(input="["+input+"]"),JSON.parse(jsonizeFilter(input))},getLatLng=function(input){var output=input;// [[1,2],[3,4]]
return input[0].constructor==Array?output=input.map(function(el){return new google.maps.LatLng(el[0],el[1])}):!isNaN(parseFloat(input[0]))&&isFinite(input[0])&&(output=new google.maps.LatLng(output[0],output[1])),output},toOptionValue=function(input,options){var output;try{// 1. Number?
output=getNumber(input)}catch(err){try{// 2. JSON?
var output=getJSON(input);if(output instanceof Array)
// [{a:1}] : not lat/lng ones
output=output[0].constructor==Object?output:getLatLng(output);else if(output===Object(output)){
// check for nested hashes and convert to Google API options
var newOptions=options;newOptions.doNotConverStringToNumber=!0,output=getOptions(output,newOptions)}}catch(err2){
// 3. Google Map Object function Expression. i.e. LatLng(80,-49)
if(input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/))try{var exp="new google.maps."+input;output=eval(exp)}catch(e){output=input}else if(input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/))try{var matches=input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);output=google.maps[matches[1]][matches[2]]}catch(e){output=input}else if(input.match(/^[A-Z]+$/))try{var capitalizedKey=options.key.charAt(0).toUpperCase()+options.key.slice(1);options.key.match(/temperatureUnit|windSpeedUnit|labelColor/)?(capitalizedKey=capitalizedKey.replace(/s$/,""),output=google.maps.weather[capitalizedKey][input]):output=google.maps[capitalizedKey][input]}catch(e){output=input}else if(input.match(isoDateRE))try{output=new Date(input)}catch(e){output=input}else if(input.match(/^{/)&&options.scope)try{var expr=input.replace(/{{/,"").replace(/}}/g,"");output=options.scope.$eval(expr)}catch(err){output=input}else output=input}}
// convert output more for shape icons
if(// catch(err)
// convert output more for center and position
("center"==options.key||"position"==options.key)&&output instanceof Array&&(output=new google.maps.LatLng(output[0],output[1])),
// convert output more for shape bounds
"bounds"==options.key&&output instanceof Array&&(output=new google.maps.LatLngBounds(output[0],output[1])),"icons"==options.key&&output instanceof Array)for(var i=0;i<output.length;i++){var el=output[i];el.icon.path.match(/^[A-Z_]+$/)&&(el.icon.path=google.maps.SymbolPath[el.icon.path])}
// convert output more for marker icon
if("icon"==options.key&&output instanceof Object){(""+output.path).match(/^[A-Z_]+$/)&&(output.path=google.maps.SymbolPath[output.path]);for(var key in output){//jshint ignore:line
var arr=output[key];"anchor"==key||"origin"==key||"labelOrigin"==key?output[key]=new google.maps.Point(arr[0],arr[1]):"size"!=key&&"scaledSize"!=key||(output[key]=new google.maps.Size(arr[0],arr[1]))}}return output},getAttrsToObserve=function(attrs){var attrsToObserve=[];if(!attrs.noWatcher)for(var attrName in attrs){//jshint ignore:line
var attrValue=attrs[attrName];attrValue&&attrValue.match(/\{\{.*\}\}/)&&// if attr value is {{..}}
attrsToObserve.push(camelCaseFilter(attrName))}return attrsToObserve},filter=function(attrs){var options={};for(var key in attrs)key.match(/^\$/)||key.match(/^ng[A-Z]/)||(options[key]=attrs[key]);return options},getOptions=function(attrs,params){params=params||{};var options={};for(var key in attrs)if(attrs[key]||0===attrs[key]){if(key.match(/^on[A-Z]/))//skip events, i.e. on-click
continue;if(key.match(/ControlOptions$/))// skip controlOptions
continue;
// nested conversions need to be typechecked
// (non-strings are fully converted)
"string"!=typeof attrs[key]?options[key]=attrs[key]:params.doNotConverStringToNumber&&attrs[key].match(/^[0-9]+$/)?options[key]=attrs[key]:options[key]=toOptionValue(attrs[key],{key:key,scope:params.scope})}// for(var key in attrs)
return options},getEvents=function(scope,attrs){var events={},toLowercaseFunc=function($1){return"_"+$1.toLowerCase()},EventFunc=function(attrValue){
// funcName(argsStr)
var matches=attrValue.match(/([^\(]+)\(([^\)]*)\)/),funcName=matches[1],argsStr=matches[2].replace(/event[ ,]*/,""),argsExpr=$parse("["+argsStr+"]");//for perf when triggering event
return function(event){//get args here to pass updated model values
function index(obj,i){return obj[i]}var args=argsExpr(scope),f=funcName.split(".").reduce(index,scope);f&&f.apply(this,[event].concat(args)),$timeout(function(){scope.$apply()})}};for(var key in attrs)if(attrs[key]){if(!key.match(/^on[A-Z]/))//skip if not events
continue;
//get event name as underscored. i.e. zoom_changed
var eventName=key.replace(/^on/,"");eventName=eventName.charAt(0).toLowerCase()+eventName.slice(1),eventName=eventName.replace(/([A-Z])/g,toLowercaseFunc);var attrValue=attrs[key];events[eventName]=new EventFunc(attrValue)}return events},getControlOptions=function(filtered){var controlOptions={};if("object"!=typeof filtered)return!1;for(var attr in filtered)if(filtered[attr]){if(!attr.match(/(.*)ControlOptions$/))continue;
//change invalid json to valid one, i.e. {foo:1} to {"foo": 1}
var orgValue=filtered[attr],newValue=orgValue.replace(/'/g,'"');newValue=newValue.replace(/([^"]+)|("[^"]+")/g,function($0,$1,$2){return $1?$1.replace(/([a-zA-Z0-9]+?):/g,'"$1":'):$2});try{var options=JSON.parse(newValue);for(var key in options)//assign the right values
if(options[key]){var value=options[key];if("string"==typeof value?value=value.toUpperCase():"mapTypeIds"===key&&(value=value.map(function(str){return str.match(/^[A-Z]+$/)?google.maps.MapTypeId[str.toUpperCase()]:str})),"style"===key){var str=attr.charAt(0).toUpperCase()+attr.slice(1),objName=str.replace(/Options$/,"")+"Style";options[key]=google.maps[objName][value]}else"position"===key?options[key]=google.maps.ControlPosition[value]:options[key]=value}controlOptions[attr]=options}catch(e){}}// for
return controlOptions};return{filter:filter,getOptions:getOptions,getEvents:getEvents,getControlOptions:getControlOptions,toOptionValue:toOptionValue,getAttrsToObserve:getAttrsToObserve,orgAttributes:orgAttributes}};Attr2MapOptions.$inject=["$parse","$timeout","$log","NavigatorGeolocation","GeoCoder","camelCaseFilter","jsonizeFilter"],angular.module("ngMap").service("Attr2MapOptions",Attr2MapOptions)}(),function(){"use strict";var $q,geocodeFunc=function(options){var deferred=$q.defer(),geocoder=new google.maps.Geocoder;return geocoder.geocode(options,function(results,status){status==google.maps.GeocoderStatus.OK?deferred.resolve(results):deferred.reject(status)}),deferred.promise},GeoCoder=function(_$q_){return $q=_$q_,{geocode:geocodeFunc}};GeoCoder.$inject=["$q"],angular.module("ngMap").service("GeoCoder",GeoCoder)}(),function(){"use strict";var $q,getCurrentPosition=function(geoLocationOptions){var deferred=$q.defer();return navigator.geolocation?(void 0===geoLocationOptions?geoLocationOptions={timeout:5e3}:void 0===geoLocationOptions.timeout&&(geoLocationOptions.timeout=5e3),navigator.geolocation.getCurrentPosition(function(position){deferred.resolve(position)},function(evt){deferred.reject(evt)},geoLocationOptions)):deferred.reject("Browser Geolocation service failed."),deferred.promise},NavigatorGeolocation=function(_$q_){return $q=_$q_,{getCurrentPosition:getCurrentPosition}};NavigatorGeolocation.$inject=["$q"],angular.module("ngMap").service("NavigatorGeolocation",NavigatorGeolocation)}(),function(){"use strict";/**
   * @memberof NgMapPool
   * @desc map instance pool
   */
var $window,$document,$timeout,mapInstances=[],add=function(el){var mapDiv=$document.createElement("div");mapDiv.style.width="100%",mapDiv.style.height="100%",el.appendChild(mapDiv);var map=new $window.google.maps.Map(mapDiv,{});return mapInstances.push(map),map},findById=function(el,id){for(var notInUseMap,i=0;i<mapInstances.length;i++){var map=mapInstances[i];if(map.id==id&&!map.inUse){var mapDiv=map.getDiv();el.appendChild(mapDiv),notInUseMap=map;break}}return notInUseMap},findUnused=function(el){for(var notInUseMap,i=0;i<mapInstances.length;i++){var map=mapInstances[i];if(!map.id&&!map.inUse){var mapDiv=map.getDiv();el.appendChild(mapDiv),notInUseMap=map;break}}return notInUseMap},getMapInstance=function(el){var map=findById(el,el.id)||findUnused(el);/* firing map idle event, which is used by map controller */
return map?$timeout(function(){google.maps.event.trigger(map,"idle")},100):map=add(el),map.inUse=!0,map},returnMapInstance=function(map){map.inUse=!1},resetMapInstances=function(){for(var i=0;i<mapInstances.length;i++)mapInstances[i]=null;mapInstances=[]},NgMapPool=function(_$document_,_$window_,_$timeout_){return $document=_$document_[0],$window=_$window_,$timeout=_$timeout_,{mapInstances:mapInstances,resetMapInstances:resetMapInstances,getMapInstance:getMapInstance,returnMapInstance:returnMapInstance}};NgMapPool.$inject=["$document","$window","$timeout"],angular.module("ngMap").factory("NgMapPool",NgMapPool)}(),function(){"use strict";var $window,$document,$q,NavigatorGeolocation,Attr2MapOptions,GeoCoder,camelCaseFilter,mapControllers={},getStyle=function(el,styleProp){var y;return el.currentStyle?y=el.currentStyle[styleProp]:$window.getComputedStyle&&(y=$document.defaultView.getComputedStyle(el,null).getPropertyValue(styleProp)),y},initMap=function(id){var ctrl=mapControllers[id||0];if(!(ctrl.map instanceof google.maps.Map))return ctrl.initializeMap(),ctrl.map},getMap=function(id){function waitForMap(timeElapsed){mapControllers[id]?deferred.resolve(mapControllers[id].map):timeElapsed>timeout?deferred.reject("could not find map"):$window.setTimeout(function(){waitForMap(timeElapsed+100)},100)}id="object"==typeof id?id.id:id,id=id||0;var deferred=$q.defer(),timeout=2e3;return waitForMap(0),deferred.promise},addMap=function(mapCtrl){if(mapCtrl.map){var len=Object.keys(mapControllers).length;mapControllers[mapCtrl.map.id||len]=mapCtrl}},deleteMap=function(mapCtrl){var len=Object.keys(mapControllers).length-1,mapId=mapCtrl.map.id||len;if(mapCtrl.map){for(var eventName in mapCtrl.eventListeners){var listener=mapCtrl.eventListeners[eventName];google.maps.event.removeListener(listener)}mapCtrl.map.controls&&mapCtrl.map.controls.forEach(function(ctrl){ctrl.clear()})}
//Remove Heatmap Layers
mapCtrl.map.heatmapLayers&&Object.keys(mapCtrl.map.heatmapLayers).forEach(function(layer){mapCtrl.deleteObject("heatmapLayers",mapCtrl.map.heatmapLayers[layer])}),delete mapControllers[mapId]},getGeoLocation=function(string,options){var deferred=$q.defer();// current location
return!string||string.match(/^current/i)?NavigatorGeolocation.getCurrentPosition(options).then(function(position){var lat=position.coords.latitude,lng=position.coords.longitude,latLng=new google.maps.LatLng(lat,lng);deferred.resolve(latLng)},function(error){deferred.reject(error)}):GeoCoder.geocode({address:string}).then(function(results){deferred.resolve(results[0].geometry.location)},function(error){deferred.reject(error)}),deferred.promise},observeAndSet=function(attrName,object){return function(val){if(val){var setMethod=camelCaseFilter("set-"+attrName),optionValue=Attr2MapOptions.toOptionValue(val,{key:attrName});object[setMethod]&&(/* if an location is being observed */
attrName.match(/center|position/)&&"string"==typeof optionValue?getGeoLocation(optionValue).then(function(latlng){object[setMethod](latlng)}):object[setMethod](optionValue))}}},setStyle=function(el){
//if style is not given to the map element, set display and height
var defaultStyle=el.getAttribute("default-style");"true"==defaultStyle?(el.style.display="block",el.style.height="300px"):("block"!=getStyle(el,"display")&&(el.style.display="block"),getStyle(el,"height").match(/^(0|auto)/)&&(el.style.height="300px"))};angular.module("ngMap").provider("NgMap",function(){var defaultOptions={};/**
     * @memberof NgMap
     * @function setDefaultOptions
     * @param {Hash} options
     * @example
     *  app.config(function(NgMapProvider) {
     *    NgMapProvider.setDefaultOptions({
     *      marker: {
     *        optimized: false
     *      }
     *    });
     *  });
     */
this.setDefaultOptions=function(options){defaultOptions=options};var NgMap=function(_$window_,_$document_,_$q_,_NavigatorGeolocation_,_Attr2MapOptions_,_GeoCoder_,_camelCaseFilter_){return $window=_$window_,$document=_$document_[0],$q=_$q_,NavigatorGeolocation=_NavigatorGeolocation_,Attr2MapOptions=_Attr2MapOptions_,GeoCoder=_GeoCoder_,camelCaseFilter=_camelCaseFilter_,{defaultOptions:defaultOptions,addMap:addMap,deleteMap:deleteMap,getMap:getMap,initMap:initMap,setStyle:setStyle,getGeoLocation:getGeoLocation,observeAndSet:observeAndSet}};NgMap.$inject=["$window","$document","$q","NavigatorGeolocation","Attr2MapOptions","GeoCoder","camelCaseFilter"],this.$get=NgMap})}(),function(){"use strict";var $q,getPanorama=function(map,latlng){latlng=latlng||map.getCenter();var deferred=$q.defer(),svs=new google.maps.StreetViewService;return svs.getPanoramaByLocation(latlng||map.getCenter,100,function(data,status){
// if streetView available
status===google.maps.StreetViewStatus.OK?deferred.resolve(data.location.pano):
// no street view available in this range, or some error occurred
deferred.resolve(!1)}),deferred.promise},setPanorama=function(map,panoId){var svp=new google.maps.StreetViewPanorama(map.getDiv(),{enableCloseButton:!0});svp.setPano(panoId)},StreetView=function(_$q_){return $q=_$q_,{getPanorama:getPanorama,setPanorama:setPanorama}};StreetView.$inject=["$q"],angular.module("ngMap").service("StreetView",StreetView)}(),"ngMap"});/**
 * Map Icons created by Scott de Jonge
 *
 * @version 3.0.0
 * @url http://map-icons.com
 *
 */
// Define Marker Shapes
var MAP_PIN="M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z",SQUARE_PIN="M22-48h-44v43h16l6 5 6-5h16z",SHIELD="M18.8-31.8c.3-3.4 1.3-6.6 3.2-9.5l-7-6.7c-2.2 1.8-4.8 2.8-7.6 3-2.6.2-5.1-.2-7.5-1.4-2.4 1.1-4.9 1.6-7.5 1.4-2.7-.2-5.1-1.1-7.3-2.7l-7.1 6.7c1.7 2.9 2.7 6 2.9 9.2.1 1.5-.3 3.5-1.3 6.1-.5 1.5-.9 2.7-1.2 3.8-.2 1-.4 1.9-.5 2.5 0 2.8.8 5.3 2.5 7.5 1.3 1.6 3.5 3.4 6.5 5.4 3.3 1.6 5.8 2.6 7.6 3.1.5.2 1 .4 1.5.7l1.5.6c1.2.7 2 1.4 2.4 2.1.5-.8 1.3-1.5 2.4-2.1.7-.3 1.3-.5 1.9-.8.5-.2.9-.4 1.1-.5.4-.1.9-.3 1.5-.6.6-.2 1.3-.5 2.2-.8 1.7-.6 3-1.1 3.8-1.6 2.9-2 5.1-3.8 6.4-5.3 1.7-2.2 2.6-4.8 2.5-7.6-.1-1.3-.7-3.3-1.7-6.1-.9-2.8-1.3-4.9-1.2-6.4z",ROUTE="M24-28.3c-.2-13.3-7.9-18.5-8.3-18.7l-1.2-.8-1.2.8c-2 1.4-4.1 2-6.1 2-3.4 0-5.8-1.9-5.9-1.9l-1.3-1.1-1.3 1.1c-.1.1-2.5 1.9-5.9 1.9-2.1 0-4.1-.7-6.1-2l-1.2-.8-1.2.8c-.8.6-8 5.9-8.2 18.7-.2 1.1 2.9 22.2 23.9 28.3 22.9-6.7 24.1-26.9 24-28.3z",SQUARE="M-24-48h48v48h-48z",SQUARE_ROUNDED="M24-8c0 4.4-3.6 8-8 8h-32c-4.4 0-8-3.6-8-8v-32c0-4.4 3.6-8 8-8h32c4.4 0 8 3.6 8 8v32z",inherits=function(childCtor,parentCtor){/** @constructor */
function tempCtor(){}tempCtor.prototype=parentCtor.prototype,childCtor.superClass_=parentCtor.prototype,childCtor.prototype=new tempCtor,childCtor.prototype.constructor=childCtor};
// Apply the inheritance
inherits(Marker,google.maps.Marker),
// Custom Marker SetMap
Marker.prototype.setMap=function(){google.maps.Marker.prototype.setMap.apply(this,arguments),this.MarkerLabel&&this.MarkerLabel.setMap.apply(this.MarkerLabel,arguments)};
// Marker Label Overlay
var MarkerLabel=function(options){var self=this;this.setValues(options),
// Create the label container
this.div=document.createElement("div"),this.div.className="map-icon-label",
// Trigger the marker click handler if clicking on the label
google.maps.event.addDomListener(this.div,"click",function(e){e.stopPropagation&&e.stopPropagation(),google.maps.event.trigger(self.marker,"click")})};
// Create MarkerLabel Object
MarkerLabel.prototype=new google.maps.OverlayView,
// Marker Label onAdd
MarkerLabel.prototype.onAdd=function(){var self=(this.getPanes().overlayImage.appendChild(this.div),this);this.listeners=[google.maps.event.addListener(this,"position_changed",function(){self.draw()}),google.maps.event.addListener(this,"text_changed",function(){self.draw()}),google.maps.event.addListener(this,"zindex_changed",function(){self.draw()})]},
// Marker Label onRemove
MarkerLabel.prototype.onRemove=function(){this.div.parentNode.removeChild(this.div);for(var i=0,I=this.listeners.length;i<I;++i)google.maps.event.removeListener(this.listeners[i])},
// Implement draw
MarkerLabel.prototype.draw=function(){var projection=this.getProjection(),position=projection.fromLatLngToDivPixel(this.get("position")),div=this.div;this.div.innerHTML=this.get("text").toString(),div.style.zIndex=this.get("zIndex"),// Allow label to overlay marker
div.style.position="absolute",div.style.display="block",div.style.left=position.x-div.offsetWidth/2+"px",div.style.top=position.y-div.offsetHeight+"px"},function(angular){"use strict";var module=angular.module("angular-bind-html-compile",[]);module.directive("bindHtmlCompile",["$compile",function($compile){return{restrict:"A",link:function(scope,element,attrs){scope.$watch(function(){return scope.$eval(attrs.bindHtmlCompile)},function(value){
// In case value is a TrustedValueHolderType, sometimes it
// needs to be explicitly called into a string in order to
// get the HTML string.
element.html(value&&value.toString());
// If scope is provided use it, otherwise use parent scope
var compileScope=scope;attrs.bindHtmlScope&&(compileScope=scope.$eval(attrs.bindHtmlScope)),$compile(element.contents())(compileScope)})}}}])}(window.angular);